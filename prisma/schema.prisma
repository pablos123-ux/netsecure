// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  name               String
  email              String    @unique
  password           String
  role               Role      @default(STAFF)
  assignedProvinceId String?
  assignedDistrictId String?
  isActive           Boolean   @default(true)
  lastLogin          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  assignedProvince   Province? @relation(fields: [assignedProvinceId], references: [id])
  assignedDistrict   District? @relation(fields: [assignedDistrictId], references: [id])
  logs               Log[]
  alerts             Alert[]
  createdRouters     Router[]  @relation("RouterCreatedBy")
  
  @@map("users")
}

model Province {
  id        String     @id @default(cuid())
  name      String     @unique
  code      String     @unique @default("")
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  districts District[]
  users     User[]
  
  @@map("provinces")
}

model District {
  id         String   @id @default(cuid())
  name       String
  code       String   @default("")
  provinceId String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  province   Province @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  towns      Town[]
  users      User[]
  
  @@unique([name, provinceId])
  @@unique([code, provinceId])
  @@map("districts")
}

model Town {
  id         String   @id @default(cuid())
  name       String
  code       String   @default("")
  districtId String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)
  routers    Router[]
  
  @@unique([name, districtId])
  @@unique([code, districtId])
  @@map("towns")
}

model Router {
  id          String       @id @default(cuid())
  name        String
  model       String
  ipAddress   String       @unique
  macAddress  String?
  status      RouterStatus @default(OFFLINE)
  uptime      Int          @default(0) // in seconds
  bandwidth   Float        @default(0) // current usage in Mbps
  capacity    Float        @default(100) // max capacity in Mbps
  location    String?      // physical location description
  townId      String
  createdById String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  lastSeen    DateTime?
  
  // Relations
  town        Town         @relation(fields: [townId], references: [id], onDelete: Cascade)
  createdBy   User         @relation("RouterCreatedBy", fields: [createdById], references: [id])
  alerts      Alert[]
  connectedUsers ConnectedUser[]
  
  @@map("routers")
}

model ConnectedUser {
  id          String            @id @default(cuid())
  deviceName  String?
  ipAddress   String
  macAddress  String
  status      ConnectedUserStatus @default(ACTIVE)
  bandwidth   Float             @default(0) // current usage in Mbps
  totalUsage  Float             @default(0) // total usage in MB
  routerId    String
  isBlocked   Boolean           @default(false)
  blockedAt   DateTime?
  blockedBy   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  lastSeen    DateTime          @default(now())
  
  // Relations
  router      Router            @relation(fields: [routerId], references: [id], onDelete: Cascade)
  
  @@unique([macAddress, routerId])
  @@map("connected_users")
}

model Log {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("logs")
}

model Alert {
  id        String      @id @default(cuid())
  routerId  String
  type      AlertType   @default(OFFLINE)
  message   String
  severity  AlertSeverity @default(MEDIUM)
  status    AlertStatus @default(ACTIVE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  resolvedAt DateTime?
  resolvedBy String?
  
  // Relations
  router    Router      @relation(fields: [routerId], references: [id], onDelete: Cascade)
  resolver  User?       @relation(fields: [resolvedBy], references: [id])
  
  @@map("alerts")
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("settings")
}

enum Role {
  ADMIN
  STAFF
}

enum RouterStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
  ERROR
}

enum ConnectedUserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum AlertStatus {
  ACTIVE
  RESOLVED
  DISMISSED
}

enum AlertType {
  OFFLINE
  HIGH_BANDWIDTH
  LOW_BANDWIDTH
  CONNECTION_ERROR
  MAINTENANCE
  SECURITY
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}